{"version":3,"sources":["../../../src/components/Button/index.ts"],"names":["BUTTON_STATE","DOWN","UP","UNKNOWN","Button","constructor","pinId","gpio","Gpio","observable","Observable","subscriber","waitingCancel","error","Error","waitingCancels","push","watch","err","state","removeWaitingCancel","next","fn","includes","index","indexOf","splice","getPin","onClick","debounce","ensureNotReleased","pipe","toPromise","releasePin","unexport","released","forEach","f","message"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,IAAI,EAAE,CADoB;AAE1BC,EAAAA,EAAE,EAAE,CAFsB;AAG1BC,EAAAA,OAAO,EAAE,CAAC;AAHgB,CAArB;;;AAgBA,MAAMC,MAAN,CAAa;AAOlBC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAwB;AAAA,sCANP,KAMO;;AAAA,4CALS,EAKT;;AAAA;;AAAA;;AAAA;;AACjC,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAY,IAAIC,WAAJ,CAASF,KAAT,EAAgB,IAAhB,EAAsB,MAAtB,CAAZ;AACA,SAAKG,UAAL,GAAkB,IAAIC,gBAAJ,CAAyBC,UAAD,IAAgB;AACxD,YAAMC,aAAa,GAAG,MAAMD,UAAU,CAACE,KAAX,CAAiB,IAAIC,KAAJ,CAAU,iBAAV,CAAjB,CAA5B;;AACA,WAAKC,cAAL,CAAoBC,IAApB,CAAyBJ,aAAzB;AAEA,WAAKL,IAAL,CAAUU,KAAV,CAAgB,CAACC,GAAD,EAAaC,KAAb,KAAoC;AAClD,YAAID,GAAJ,EAAS;AACP,eAAKE,mBAAL,CAAyBR,aAAzB;AACA,iBAAOD,UAAU,CAACE,KAAX,CAAiBK,GAAjB,CAAP;AACD;;AAEDP,QAAAA,UAAU,CAACU,IAAX,CAAgBF,KAAK,KAAKnB,YAAY,CAACC,IAAvC;AACD,OAPD;AAQD,KAZiB,CAAlB;AAaD,GAvBiB,CAyBlB;;;AACQmB,EAAAA,mBAAR,CAA4BE,EAA5B,EAA4C;AAC1C,QAAI,KAAKP,cAAL,CAAoBQ,QAApB,CAA6BD,EAA7B,CAAJ,EAAsC;AACpC,YAAME,KAAK,GAAG,KAAKT,cAAL,CAAoBU,OAApB,CAA4BH,EAA5B,CAAd;AACA,WAAKP,cAAL,CAAoBW,MAApB,CAA2BF,KAA3B,EAAkC,CAAlC;AACD;AACF;;AAEMG,EAAAA,MAAP,GAAwB;AACtB,WAAO,KAAKrB,KAAZ;AACD;;AAED,QAAasB,OAAb,CAAqB;AAAEC,IAAAA;AAAF,MAA4B,EAAjD,EAAoE;AAClE,SAAKC,iBAAL;;AAEA,QAAID,QAAJ,EAAc;AACZ,YAAM,KAAKpB,UAAL,CAAgBsB,IAAhB,CAAqB,6BAAaF,QAAb,CAArB,EAA6C,uBAA7C,EAAsDG,SAAtD,EAAN;AACD,KAFD,MAEO;AACL,YAAM,KAAKvB,UAAL,CAAgBsB,IAAhB,CAAqB,uBAArB,EAA8BC,SAA9B,EAAN;AACD;AACF;;AAEMC,EAAAA,UAAP,GAA0B;AACxB,SAAKH,iBAAL;AAEA,SAAKvB,IAAL,CAAU2B,QAAV;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKpB,cAAL,CAAoBqB,OAApB,CAA4BC,CAAC,IAAIA,CAAC,EAAlC;AACD;;AAEOP,EAAAA,iBAAR,CAA0BQ,OAAe,GAAG,6BAA5C,EAAiF;AAC/E,QAAI,KAAKH,QAAT,EAAmB;AACjB,YAAM,IAAIrB,KAAJ,CAAUwB,OAAV,CAAN;AACD;AACF;;AA3DiB","sourcesContent":["import { Gpio } from 'onoff';\nimport { Observable } from 'rxjs';\nimport { debounceTime, first } from 'rxjs/operators';\n\nexport const BUTTON_STATE = {\n  DOWN: 1,\n  UP: 0,\n  UNKNOWN: -1,\n};\n\ntype ButtonState = 1 | 0 | -1;\n\nexport interface ButtonArgs {\n  pinId: number;\n}\n\nexport interface OnClickArgs {\n  debounce?: number;\n}\n\nexport class Button {\n  private released: boolean = false;\n  private waitingCancels: Array<() => void> = [];\n  private readonly gpio: Gpio;\n  private readonly pinId: number;\n  private readonly observable: Observable<boolean>;\n\n  constructor({ pinId }: ButtonArgs) {\n    this.pinId = pinId;\n    this.gpio = new Gpio(pinId, 'in', 'both');\n    this.observable = new Observable<boolean>((subscriber) => {\n      const waitingCancel = () => subscriber.error(new Error('Button released'));\n      this.waitingCancels.push(waitingCancel);\n\n      this.gpio.watch((err: Error, state: ButtonState) => {\n        if (err) {\n          this.removeWaitingCancel(waitingCancel);\n          return subscriber.error(err);\n        }\n\n        subscriber.next(state === BUTTON_STATE.DOWN);\n      });\n    });\n  }\n\n  // TODO: Remove waiting cancels for all resolved subscriptions\n  private removeWaitingCancel(fn: () => void) {\n    if (this.waitingCancels.includes(fn)) {\n      const index = this.waitingCancels.indexOf(fn);\n      this.waitingCancels.splice(index, 1);\n    }\n  }\n\n  public getPin(): number {\n    return this.pinId;\n  }\n\n  public async onClick({ debounce }: OnClickArgs = {}): Promise<void> {\n    this.ensureNotReleased();\n\n    if (debounce) {\n      await this.observable.pipe(debounceTime(debounce), first()).toPromise();\n    } else {\n      await this.observable.pipe(first()).toPromise();\n    }\n  }\n\n  public releasePin(): void {\n    this.ensureNotReleased();\n\n    this.gpio.unexport();\n    this.released = true;\n    this.waitingCancels.forEach(f => f());\n  }\n\n  private ensureNotReleased(message: string = 'Button pin already released'): void {\n    if (this.released) {\n      throw new Error(message);\n    }\n  }\n}\n"],"file":"index.js"}