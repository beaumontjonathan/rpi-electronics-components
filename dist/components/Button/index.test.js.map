{"version":3,"sources":["../../../src/components/Button/index.test.ts"],"names":["mockWatch","jest","fn","mockUnexport","mock","Gpio","b","getLatestCall","calls","describe","beforeEach","Button","pinId","mockReset","it","button","expect","getPin","toBe","onClick","then","toHaveBeenCalled","promise","watch","resolves","undefined","debounce","p1","start","Date","now","end","toBeGreaterThanOrEqual","releasePin","rejects","toEqual","Error","p"],"mappings":"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","sourcesContent":["import { Button } from '.';\n\nconst mockWatch = jest.fn();\nconst mockUnexport = jest.fn();\n\njest.mock('onoff', () => ({\n  Gpio: class Gpio {\n    watch = mockWatch;\n    unexport = mockUnexport;\n  },\n}));\n\nlet b: Button;\n\nconst getLatestCall = () => mockWatch.mock.calls[0];\n\ndescribe('Button', () => {\n  beforeEach(() => {\n    b = new Button({ pinId: 4 });\n    mockWatch.mockReset();\n    mockUnexport.mockReset();\n  });\n\n  describe('#getPin', () => {\n    it('should match the provided pin', () => {\n      const pinId = 6;\n      const button = new Button({ pinId });\n      expect(button.getPin()).toBe(pinId);\n    });\n  });\n\n  describe('#onClick', () => {\n    it('should watch', async () => {\n      expect(typeof b.onClick().then).toBe('function');\n      expect(mockWatch).toHaveBeenCalled();\n    });\n\n    it('should resolve onClick promise when watch called', async () => {\n      const promise = b.onClick();\n      expect(mockWatch).toHaveBeenCalled();\n      const [watch] = getLatestCall();\n      watch(null, 1);\n      await expect(promise).resolves.toBe(undefined);\n    });\n\n    it('should debounce', async () => {\n      const debounce = 100;\n      const p1 = b.onClick({ debounce });\n      expect(mockWatch).toHaveBeenCalled();\n      const [watch] = getLatestCall();\n      const start = Date.now();\n      watch(null, 1);\n      await p1;\n      const end = Date.now();\n      expect(end - start).toBeGreaterThanOrEqual(debounce);\n    });\n\n    it('should throw an error if released', async () => {\n      b.releasePin();\n      await expect(b.onClick()).rejects.toEqual(Error('Button pin already released'));\n    });\n  });\n\n  describe('#releasePin', () => {\n    it('should reject existing promises', async () => {\n      const p = b.onClick();\n      b.releasePin();\n      await expect(p).rejects.toEqual(new Error('Button released'));\n    });\n\n    it('should throw an error', () => {\n\n    });\n  });\n});\n"],"file":"index.test.js"}